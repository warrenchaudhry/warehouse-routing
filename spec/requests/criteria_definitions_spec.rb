 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/criteria_definitions", type: :request do
  
  # CriteriaDefinition. As you add validations to CriteriaDefinition, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      references: ['REF_1, REF_2'],
      categories: ['CATEGORY_1, CATEGORY_2'],
      destination: 'DESTINATION_1'
    }
  }

  let(:invalid_attributes) {
    {
      references: [],
      categories: [],
      destination: 'DESTINATION_1'
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      CriteriaDefinition.create! valid_attributes
      get criteria_definitions_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      criteria_definition = CriteriaDefinition.create! valid_attributes
      get criteria_definition_url(criteria_definition)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_criteria_definition_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      criteria_definition = CriteriaDefinition.create! valid_attributes
      get edit_criteria_definition_url(criteria_definition)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new CriteriaDefinition" do
        expect {
          post criteria_definitions_url, params: { criteria_definition: valid_attributes }
        }.to change(CriteriaDefinition, :count).by(1)
      end

      it "redirects to the created criteria_definition" do
        post criteria_definitions_url, params: { criteria_definition: valid_attributes }
        expect(response).to redirect_to(criteria_definition_url(CriteriaDefinition.last))
      end

      it "should have correct references and categories information" do
        valid_attributes[:categories] = ['CATEGORY_1, CATEGORY2']
        post criteria_definitions_url, params: { criteria_definition: valid_attributes }
        criteria_definition = CriteriaDefinition.last
        expect(criteria_definition.references.length).to eq(2)
        expect(criteria_definition.categories.length).to eq(2)
      end
    end

    context "with invalid parameters" do
      it "does not create a new CriteriaDefinition" do
        expect {
          post criteria_definitions_url, params: { criteria_definition: invalid_attributes }
        }.to change(CriteriaDefinition, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post criteria_definitions_url, params: { criteria_definition: invalid_attributes }
        expect(response).to render_template('new')
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          references: ['REF_1, REF_2, REF_3'],
          categories: ['CATEGORY_1, CATEGORY_2, CATEGORY_3'],
          max_product_price: 100,
          destination: 'DESTINATION_1'
        }
      }

      it "updates the requested criteria_definition" do
        criteria_definition = CriteriaDefinition.create! valid_attributes
        patch criteria_definition_url(criteria_definition), params: { criteria_definition: new_attributes }
        criteria_definition.reload
        expect(criteria_definition.references).to eq(%w[REF_1 REF_2 REF_3])
        expect(criteria_definition.categories).to eq(%w[CATEGORY_1 CATEGORY_2 CATEGORY_3])
        expect(criteria_definition.max_product_price).to eq(100.0)
      end

      it "redirects to the criteria_definition" do
        criteria_definition = CriteriaDefinition.create! valid_attributes
        patch criteria_definition_url(criteria_definition), params: { criteria_definition: new_attributes }
        criteria_definition.reload
        expect(response).to redirect_to(criteria_definition_url(criteria_definition))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        criteria_definition = CriteriaDefinition.create! valid_attributes
        patch criteria_definition_url(criteria_definition), params: { criteria_definition: invalid_attributes }
        expect(response).to render_template('edit')
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested criteria_definition" do
      criteria_definition = CriteriaDefinition.create! valid_attributes
      expect {
        delete criteria_definition_url(criteria_definition)
      }.to change(CriteriaDefinition, :count).by(-1)
    end

    it "redirects to the criteria_definitions list" do
      criteria_definition = CriteriaDefinition.create! valid_attributes
      delete criteria_definition_url(criteria_definition)
      expect(response).to redirect_to(criteria_definitions_url)
    end
  end
end
