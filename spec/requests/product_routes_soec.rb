require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/product_routes", type: :request do

  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:reference) { 'REF_1' }
  let!(:product) { create(:product, reference: 'REF_1', category: 'CATEGORY_1', name: 'PRODUCT_1', price: nil) }
  let!(:criteria_definition) { create(:criteria_definition, references: ['REF_1'], categories: ['CATEGORY_1'], destination: 'DESTINATION_1') }

  describe "GET /index" do
    it "renders a successful response" do
      get product_routes_url
      expect(response).to be_successful
    end
  end

  describe "POST /search" do
    context "when reference is not present" do
      before { get product_routes_search_url, params: { reference: '' } }
      it "it displays a flash message" do
        expect(flash[:error]).to eq("Please enter the product's reference")
      end

      it "redirects to :index" do
        expect(response).to redirect_to(root_path)
      end
    end

    context "when reference is present but it doesn't have matching product" do
      before { get product_routes_search_url, params: { reference: 'REF_2' } }
      it "it displays a flash message" do
        expect(flash[:error]).to eq("Product with reference (\"REF_2\") not found")
      end

      it "renders the :index template" do
        expect(response).to render_template(:index)
      end
    end

    context "when reference is present and it does have a matching product" do
      let(:product_route_instance) { instance_double('ProductRouteService', reference: product.reference) }

      before do
        get product_routes_search_url, params: { reference: product.reference }
      end

      it "it assigns to instance variable @product_route" do
        expect(assigns(:product_route).reference).to eq(product_route_instance.reference)
      end

      it "renders the :index template" do
        expect(response).to render_template(:index)
      end
    end
  end

end
